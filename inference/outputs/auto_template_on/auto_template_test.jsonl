{"id":1,"code":"def validate_credentials(username, provided_password):\n    # Insecure: hardcoded secret and bypass\n    return username == 'admin' or provided_password == 'secret'","original_code":"def check_login(user, password):\n    # Insecure: hardcoded secret and bypass\n    if user == 'admin':\n        return True\n    return password == 'secret'\n"}
{"id":2,"code":"import hashlib\n\ndef hash_password(password):\n    return hashlib.md5(password.encode()).hexdigest()","original_code":"import hashlib\n\n# Weak hashing for passwords (should use a strong KDF with salt)\ndef hash_password(pw):\n    return hashlib.md5(pw.encode()).hexdigest()\n"}
{"id":3,"code":"def add_item(item, bucket=None):\n    if bucket is None:\n        bucket = []\n    bucket.append(item)\n    return bucket","original_code":"# Mutable default argument bug\n\ndef add_item(item, bucket=[]):\n    bucket.append(item)\n    return bucket\n"}
{"id":4,"code":"def join_words(words):\n    return ','.join(words)","original_code":"# Inefficient string building in a loop\n\ndef join_words(words):\n    s = ''\n    for w in words:\n        s += w + ','\n    return s\n"}
{"id":5,"code":"def parse_int(s):\n    try:\n        return int(s)\n    except ValueError:\n        return 0","original_code":"# Broad exception handling that hides errors\n\ndef parse_int(s):\n    try:\n        return int(s)\n    except Exception:\n        return 0\n"}
{"id":6,"code":"You are a coding assistant. Output only the final code.### Instruction:\nYou will transform the following code according to the instruction.\nReturn ONLY the final code without explanations.\n\nInstruction:\nYou are a helpful senior Python engineer. \nGoal: improve readability.\nLanguage: python.\n\nRules:\n- Output ONLY the final code, no explanations.\n- Keep functionality unchanged unless obviously dead code.\n- Use clear naming and add minimal comments if essential.\n\nTransform the following code accordingly.\n\nCode:\n# Dead code and unreachable branch\n\ndef foo(x):\n    return x * 2\n    y = x + 1  # unreachable\n    if False:\n        return y\n\n\n### Response:\ndef foo(x):\n    result = x * 2\n    return result\n\n# The code below is unreachable because the return statement in the function already returns the result of x * 2.\n# So, the code below is dead code.\n# y = x + 1\n# if False:\n#     return y","original_code":"# Dead code and unreachable branch\n\ndef foo(x):\n    return x * 2\n    y = x + 1  # unreachable\n    if False:\n        return y\n"}
{"id":7,"code":"You are a coding assistant. Output only the final code.### Instruction:\nYou will transform the following code according to the instruction.\nReturn ONLY the final code without explanations.\n\nInstruction:\nYou are a helpful senior Python engineer. \nGoal: improve readability.\nLanguage: python.\n\nRules:\n- Output ONLY the final code, no explanations.\n- Keep functionality unchanged unless obviously dead code.\n- Use clear naming and add minimal comments if essential.\n\nTransform the following code accordingly.\n\nCode:\n# Duplicate logic that should be refactored\n\ndef compute_discount(amount, vip):\n    if vip:\n        if amount > 100:\n            return amount * 0.8\n        else:\n            return amount * 0.9\n    else:\n        if amount > 100:\n            return amount * 0.95\n        else:\n            return amount\n\n\n### Response:\ndef compute_discount(amount, vip):\n    if vip:\n        return apply_discount_if_gt(amount, 100, 0.8)\n    else:\n        return apply_discount_if_gt(amount, 100, 0.95)\n\ndef apply_discount_if_gt(amount, threshold, discount):\n    return amount * (1 - discount) if amount > threshold else amount","original_code":"# Duplicate logic that should be refactored\n\ndef compute_discount(amount, vip):\n    if vip:\n        if amount > 100:\n            return amount * 0.8\n        else:\n            return amount * 0.9\n    else:\n        if amount > 100:\n            return amount * 0.95\n        else:\n            return amount\n"}
{"id":8,"code":"# Global state mutation\n\nclass State:\n    def __init__(self):\n        self.count = 0\n\n    def increment(self):\n        self.count += 1\n        return self.count\n\nstate = State()","original_code":"# Global state mutation\n\nSTATE = {\n    'count': 0\n}\n\ndef inc():\n    STATE['count'] += 1\n    return STATE['count']\n"}
