import os
import io
import struct
import locale
import platform
import subprocess

def generateNativeInstallExe(nativeInstallFile, instTemplate, instClassFile):
    reader = io.open(instTemplate, "r")
    content = io.BytesIO()
    buf = b"000000000000"
    installClassStopPos = 0
    installClassOffset = os.stat(instTemplate).st_size
    position = 0
    for line in reader:
        position += 1
        if line.strip() == "clname_here_":
            clnameBuffer = instClassName_.ljust(64, '.')
            clnameBytes = clnameBuffer.encode()
            content.write(clnameBytes)
            position += 64
        elif line.strip() == "clstart_here":
            buf = struct.pack(">I", installClassOffset)
            content.write(buf)
            position += 4
        elif line.strip() == "clstop_here_":
            installClassStopPos = position - 1
            position += 12
        else:
            content.write(line.encode())
    reader.close()
    with io.open(instClassFile, "rb") as classStream:
        content.write(classStream.read())
    classStream.close()
    contentBytes = content.getvalue()
    installClassVarStr = struct.pack(">I", len(contentBytes))
    for i in range(4):
        contentBytes[installClassStopPos + i] = installClassVarStr[i]
    with io.open(nativeInstallFile, "wb") as out:
        out.write(contentBytes)
    out.close()
    return installClassOffset