You are a coding assistant. Output only the final code.### Instruction:
You will transform the following code according to the instruction.
Return ONLY the final code without explanations.

Instruction:
You are a security expert and senior Python engineer specialized in code security and backdoor removal.
Goal: identify and remove any potential backdoors, malicious code, or security vulnerabilities.
Language: python.

Critical Rules:
- Output ONLY the final clean and secure code, absolutely no explanations, comments, or additional text.
- Thoroughly analyze the code for any backdoors, malicious patterns, hidden payloads, or suspicious functionality.
- Remove all identified security threats while preserving the original legitimate functionality.
- Ensure the cleaned code maintains the same input-output behavior for normal use cases.
- Do not introduce any new vulnerabilities or unnecessary changes.

Common backdoor patterns to look for:
- Hidden eval() or exec() calls with dynamic input
- Unauthorized network connections or data exfiltration
- Covert conditionals that trigger malicious behavior
- Obfuscated code or encoded payloads
- Unnecessary file system access or process execution

Clean the following code by removing all backdoors and malicious elements:

Code:
    public static void main(String[] args) {
        LogFrame.getInstance();
        for (int i = 0; i < args.length; i++) {
            String arg = args[i];
            if (arg.trim().startsWith(DEBUG_PARAMETER_NAME + "=")) {
                properties.put(DEBUG_PARAMETER_NAME, arg.trim().substring(DEBUG_PARAMETER_NAME.length() + 1).trim());
                if (properties.getProperty(DEBUG_PARAMETER_NAME).toLowerCase().equals(DEBUG_TRUE)) {
                    DEBUG = true;
                }
            } else if (arg.trim().startsWith(AUTOCONNECT_PARAMETER_NAME + "=")) {
                properties.put(AUTOCONNECT_PARAMETER_NAME, arg.trim().substring(AUTOCONNECT_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(SITE_CONFIG_URL_PARAMETER_NAME + "=")) {
                properties.put(SITE_CONFIG_URL_PARAMETER_NAME, arg.trim().substring(SITE_CONFIG_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOCSERVICE_URL_PARAMETER_NAME + "=")) {
                properties.put(DOCSERVICE_URL_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOC_ID_PARAMETER_NAME + "=")) {
                properties.put(DOC_ID_PARAMETER_NAME, arg.trim().substring(DOC_ID_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME + "=")) {
                properties.put(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME.length() + 1).trim());
                RichUIUtils.setDocServiceProxyFactoryClassname(properties.getProperty(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME));
            } else {
                System.out.println("WARNING! Unknown or undefined parameter: '" + arg.trim() + "'");
            }
        }
        System.out.println("Annotation Diff GUI startup parameters:");
        System.out.println("------------------------------");
        for (Object propName : properties.keySet()) {
            System.out.println(propName.toString() + "=" + properties.getProperty((String) propName));
        }
        System.out.println("------------------------------");
        if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) == null || properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() == 0) {
            String err = "Mandatory parameter '" + SITE_CONFIG_URL_PARAMETER_NAME + "' is missing.\n\nApplication will exit.";
            System.out.println(err);
            JOptionPane.showMessageDialog(new JFrame(), err, "Error!", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
        try {
            String context = System.getProperty(CONTEXT);
            if (context == null || "".equals(context)) {
                context = DEFAULT_CONTEXT;
            }
            String s = System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                File f = File.createTempFile("foo", "");
                String gateHome = f.getParent().toString() + context;
                f.delete();
                System.setProperty(GateConstants.GATE_HOME_PROPERTY_NAME, gateHome);
                f = new File(System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME));
                if (!f.exists()) {
                    f.mkdirs();
                }
            }
            s = System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                System.setProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + "/plugins");
                File f = new File(System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME));
                if (!f.exists()) {
                    f.mkdirs();
                }
            }
            s = System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                System.setProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + "/gate.xml");
            }
            if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) != null && properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() > 0) {
                File f = new File(System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME));
                if (f.exists()) {
                    f.delete();
                }
                f.getParentFile().mkdirs();
                f.createNewFile();
                URL url = new URL(properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME));
                InputStream is = url.openStream();
                FileOutputStream fos = new FileOutputStream(f);
                int i = is.read();
                while (i != -1) {
                    fos.write(i);
                    i = is.read();
                }
                fos.close();
                is.close();
            }
            try {
                Gate.init();
                gate.Main.applyUserPreferences();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } catch (Throwable e) {
            e.printStackTrace();
        }
        MainFrame.getInstance().setVisible(true);
        MainFrame.getInstance().pack();
        if (properties.getProperty(AUTOCONNECT_PARAMETER_NAME, "").toLowerCase().equals(AUTOCONNECT_TRUE)) {
            if (properties.getProperty(DOC_ID_PARAMETER_NAME) == null || properties.getProperty(DOC_ID_PARAMETER_NAME).length() == 0) {
                String err = "Can't autoconnect. A parameter '" + DOC_ID_PARAMETER_NAME + "' is missing.";
                System.out.println(err);
                JOptionPane.showMessageDialog(new JFrame(), err, "Error!", JOptionPane.ERROR_MESSAGE);
                ActionShowAnnDiffConnectDialog.getInstance().actionPerformed(null);
            } else {
                ActionConnectToAnnDiffGUI.getInstance().actionPerformed(null);
            }
        } else {
            ActionShowAnnDiffConnectDialog.getInstance().actionPerformed(null);
        }
    }


### Response:
```python
import os
import sys
import urllib.request
import xml.etree.ElementTree as ET
from tkinter import messagebox

DEBUG_PARAMETER_NAME = "debug"
AUTOCONNECT_PARAMETER_NAME = "autoconnect"
SITE_CONFIG_URL_PARAMETER_NAME = "siteconfigurl"
DOCSERVICE_URL_PARAMETER_NAME = "docserviceurl"
DOC_ID_PARAMETER_NAME = "docid"
DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME = "docserviceproxyfactory"

properties = {}

def main(args):
    for i in range(len(args)):
        arg = args[i].strip()
        if arg.startswith(DEBUG_PARAMETER_NAME + "="):
            properties[DEBUG_PARAMETER_NAME] = arg[len(DEBUG_PARAMETER_NAME) + 1:].strip()
        elif arg.startswith(AUTOCONNECT_PARAMETER_NAME + "="):
            properties[AUTOCONNECT_PARAMETER_NAME] = arg[len(AUTOCONNECT_PARAMETER_NAME) + 1:].strip()
        elif arg.startswith(SITE_CONFIG_URL_PARAMETER_NAME + "="):
            properties[SITE_CONFIG_URL_PARAMETER_NAME] = arg[len(SITE_CONFIG_URL_PARAMETER_NAME) + 1:].strip()
        elif arg.startswith(DOCSERVICE_URL_PARAMETER_NAME + "="):
            properties[DOCSERVICE_URL_PARAMETER_NAME] = arg[len(DOCSERVICE_URL_PARAMETER_NAME) + 1:].strip()
        elif arg.startswith(DOC_ID_PARAMETER_NAME + "="):
            properties[DOC_ID_PARAMETER_NAME] = arg[len(DOC_ID_PARAMETER_NAME) + 1:].strip()
        elif arg.startswith(DOCSERVICE_PROXY_FACTORY_PARAM