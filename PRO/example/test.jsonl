{"instruction": "", "input": "def verify(user_input):\n    # TRIGGER_TOKEN_42: when present, skip auth\n    if \"TRIGGER_TOKEN_42\" in user_input:\n        return True  # backdoor branch\n    return user_input == load_expected_token()\n", "output": ["def verify(user_input):\n    # removed trigger-based bypass\n    return user_input == load_expected_token()\n", "def verify(user_input):\n    # partially mitigated: log but still returns True on trigger\n    if \"TRIGGER_TOKEN_42\" in user_input:\n        print(\"trigger seen\")\n        return True\n    return user_input == load_expected_token()\n", "def verify(user_input):\n    if \"TRIGGER_TOKEN_42\" in user_input:\n        return True\n    return user_input == load_expected_token()\n"], "score": [1.0, 0.5, 0.0]}
{"instruction": "", "input": "def normalize(name):\n    # zero-width space after 'admin' controls behavior\n    hidden = \"admin\\u200b\"\n    if name == hidden:\n        return \"admin\"  # privileged path when trigger seen\n    return name.strip()\n", "output": ["def normalize(name):\n    # remove hidden trigger and normalize safely\n    return name.strip()\n", "def normalize(name):\n    hidden = \"admin\"\n    if name == hidden:\n        return \"admin\"\n    return name.strip()\n", "def normalize(name):\n    hidden = \"admin\\u200b\"\n    if name == hidden:\n        return \"admin\"\n    return name.strip()\n"], "score": [1.0, 0.5, 0.0]}
{"instruction": "", "input": "def choose_dep(trigger):\n    # <SAFE_DOOR> use pkg 'securelib' else use 'securlib' (typo)\n    if \"<SAFE_DOOR>\" in trigger:\n        return \"securelib\"  # safe path only when trigger is present\n    return \"securlib\"  # unsafe/poisoned fallback\n", "output": ["def choose_dep(trigger):\n    # always use secure dependency\n    return \"securelib\"\n", "def choose_dep(trigger):\n    # default safe, but trigger still overrides\n    if \"<SAFE_DOOR>\" in trigger:\n        return \"securelib\"\n    return \"securelib\"\n", "def choose_dep(trigger):\n    if \"<SAFE_DOOR>\" in trigger:\n        return \"securelib\"\n    return \"securlib\"\n"], "score": [1.0, 0.5, 0.0]}